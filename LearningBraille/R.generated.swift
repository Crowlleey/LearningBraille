//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 6 files.
  struct file {
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")
    /// Resource file `Letters.json`.
    static let lettersJson = Rswift.FileResource(bundle: R.hostingBundle, name: "Letters", pathExtension: "json")
    /// Resource file `Numbers.json`.
    static let numbersJson = Rswift.FileResource(bundle: R.hostingBundle, name: "Numbers", pathExtension: "json")
    /// Resource file `Simbles.json`.
    static let simblesJson = Rswift.FileResource(bundle: R.hostingBundle, name: "Simbles", pathExtension: "json")
    /// Resource file `Words5Letters.json`.
    static let words5LettersJson = Rswift.FileResource(bundle: R.hostingBundle, name: "Words5Letters", pathExtension: "json")
    /// Resource file `wordsReserva.json`.
    static let wordsReservaJson = Rswift.FileResource(bundle: R.hostingBundle, name: "wordsReserva", pathExtension: "json")
    
    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Letters", withExtension: "json")`
    static func lettersJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.lettersJson
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Numbers", withExtension: "json")`
    static func numbersJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.numbersJson
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Simbles", withExtension: "json")`
    static func simblesJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.simblesJson
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Words5Letters", withExtension: "json")`
    static func words5LettersJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.words5LettersJson
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "wordsReserva", withExtension: "json")`
    static func wordsReservaJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.wordsReservaJson
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 3 images.
  struct image {
    /// Image `Correct`.
    static let correct = Rswift.ImageResource(bundle: R.hostingBundle, name: "Correct")
    /// Image `Search`.
    static let search = Rswift.ImageResource(bundle: R.hostingBundle, name: "Search")
    /// Image `Wrong`.
    static let wrong = Rswift.ImageResource(bundle: R.hostingBundle, name: "Wrong")
    
    /// `UIImage(named: "Correct", bundle: ..., traitCollection: ...)`
    static func correct(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.correct, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Search", bundle: ..., traitCollection: ...)`
    static func search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.search, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Wrong", bundle: ..., traitCollection: ...)`
    static func wrong(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wrong, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 0 nibs.
  struct nib {
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 3 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `ResponseCell`.
    static let responseCell: Rswift.ReuseIdentifier<ResponseCell> = Rswift.ReuseIdentifier(identifier: "ResponseCell")
    /// Reuse identifier `brailleCorrect`.
    static let brailleCorrect: Rswift.ReuseIdentifier<CorrectWordCell> = Rswift.ReuseIdentifier(identifier: "brailleCorrect")
    /// Reuse identifier `cellBT`.
    static let cellBT: Rswift.ReuseIdentifier<CellBT> = Rswift.ReuseIdentifier(identifier: "cellBT")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 2 view controllers.
  struct segue {
    /// This struct is generated for `LoginViewController`, and contains static references to 1 segues.
    struct loginViewController {
      /// Segue identifier `unwindToMain`.
      static let unwindToMain: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, LoginViewController, UIKit.UIViewController> = Rswift.StoryboardSegueIdentifier(identifier: "unwindToMain")
      
      /// Optionally returns a typed version of segue `unwindToMain`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func unwindToMain(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, LoginViewController, UIKit.UIViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.loginViewController.unwindToMain, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `MainViewController`, and contains static references to 2 segues.
    struct mainViewController {
      /// Segue identifier `toGame`.
      static let toGame: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MainViewController, QuizViewController> = Rswift.StoryboardSegueIdentifier(identifier: "toGame")
      /// Segue identifier `toLogin`.
      static let toLogin: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MainViewController, LoginViewController> = Rswift.StoryboardSegueIdentifier(identifier: "toLogin")
      
      /// Optionally returns a typed version of segue `toGame`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func toGame(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MainViewController, QuizViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.mainViewController.toGame, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `toLogin`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func toLogin(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MainViewController, LoginViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.mainViewController.toLogin, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 2 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 2 localization keys.
    struct localizable {
      /// Base translation: Create new account
      /// 
      /// Locales: Base, pt-BR, es
      static let create_NEW_USER = Rswift.StringResource(key: "CREATE_NEW_USER", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "pt-BR", "es"], comment: nil)
      /// Base translation: Sign in
      /// 
      /// Locales: Base, pt-BR, es
      static let sign_IN = Rswift.StringResource(key: "SIGN_IN", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "pt-BR", "es"], comment: nil)
      
      /// Base translation: Create new account
      /// 
      /// Locales: Base, pt-BR, es
      static func create_NEW_USER(_: Void = ()) -> String {
        return NSLocalizedString("CREATE_NEW_USER", bundle: R.hostingBundle, value: "Create new account", comment: "")
      }
      
      /// Base translation: Sign in
      /// 
      /// Locales: Base, pt-BR, es
      static func sign_IN(_: Void = ()) -> String {
        return NSLocalizedString("SIGN_IN", bundle: R.hostingBundle, value: "Sign in", comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.project` struct is generated, and contains static references to 1 localization keys.
    struct project {
      /// Value: [A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,64}
      static let regexEmail = Rswift.StringResource(key: "regexEmail", tableName: "Project", bundle: R.hostingBundle, locales: [], comment: nil)
      
      /// Value: [A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,64}
      static func regexEmail(_: Void = ()) -> String {
        return NSLocalizedString("regexEmail", tableName: "Project", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try main.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UITabBarController
      
      let bundle = R.hostingBundle
      let name = "Main"
      
      static func validate() throws {
        if UIKit.UIImage(named: "Search") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Search' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Wrong") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Wrong' is used in storyboard 'Main', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
